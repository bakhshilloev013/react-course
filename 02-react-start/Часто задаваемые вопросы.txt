1) ReactDOM.createRoot что это такое?
ReactDOM.createRoot — это метод в библиотеке React, который используется для создания корневого компонента React для приложения. Он был представлен в React версии 16.9.
В предыдущих версиях React для создания корневого компонента обычно использовался метод ReactDOM.render. Однако createRoot представляет новый подход к рендерингу, который включает в себя возможность асинхронного рендеринга и потенциально улучшает производительность приложения.

2) Почему ему передаются document.getElementById('root')
document.getElementById('root') используется для получения ссылки на DOM-элемент, в котором будет размещен корневой компонент React. Обычно в HTML-разметке есть элемент с идентификатором 'root', который служит контейнером для всего React-приложения.

3) Зачем вообще нужен корневой компонент?
Корневой компонент в React играет ключевую роль в структуре приложения. Вот несколько причин, почему он нужен:
    - Монтирование React приложения: Корневой компонент служит точкой входа для вашего React приложения. Это место, где React начинает работу и где вы указываете, какие компоненты должны быть отображены в вашем интерфейсе.
    - Разделение приложения и DOM: Корневой компонент отделяет React-код от обычного DOM. Весь ваш React-код и виртуальное дерево компонентов работают внутри этого контейнера, что упрощает организацию и управление вашим приложением.
    - Организация кода: Иметь один корневой компонент обычно делает ваш код более организованным и понятным. Вы можете легко найти точку входа в приложение, что облегчает его поддержку и развитие.
    - Управление состоянием и жизненным циклом: Корневой компонент также может быть местом для управления глобальным состоянием и подписки на обновления. Вы можете использовать методы жизненного цикла этого компонента для выполнения различных операций, таких как загрузка данных или настройка приложения.
В целом, корневой компонент является фундаментальной частью архитектуры React-приложений, обеспечивая начальную точку для построения всего интерфейса и управления его поведением.

4) React.StrictMode что это такое?
React.StrictMode — это компонент высшего порядка (higher-order component) в библиотеке React, который предназначен для помощи в обнаружении потенциальных проблем в приложении и предупреждении о них. Он был введен в React версии 16.3.

Когда вы оборачиваете свое приложение в React.StrictMode, React выполняет дополнительные проверки и предупреждения во время разработки, которые помогают выявить следующие проблемы:

Дублирование side-effects во время рендеринга: StrictMode может обнаружить компоненты, которые вызывают побочные эффекты (side-effects), такие как запись в консоль или сетевые запросы, несколько раз во время рендеринга. Это может указывать на проблемы с производительностью или неожиданным поведением.

Устаревшие методы жизненного цикла: StrictMode предупреждает об использовании устаревших методов жизненного цикла, таких как componentWillMount, componentWillUpdate и componentWillReceiveProps, которые в скором времени будут удалены из React.

Неустойчивые методы чтения контекста: StrictMode также предупреждает о неустойчивом чтении контекста, когда компоненты обращаются к контексту в методе render, что может привести к нежелательному поведению при обновлении состояния.

В целом, React.StrictMode помогает разработчикам обнаружить и устранить потенциальные проблемы в их React-приложениях, что способствует повышению качества и производительности кода. Однако следует помнить, что эти предупреждения отображаются только во время разработки и не влияют на производительность или поведение приложения в производственной среде.